{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30664,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false},"colab":{"name":"bird notes","provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/bird-notes-28a5e3e8-edac-4c45-9d03-f7fd3440ffed.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20240302/auto/storage/goog4_request&X-Goog-Date=20240302T112335Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=12e0391d42d655f7afffdb36252a9006ae83bcab00a2b5690b7bc4386cf26fb58b561ec1d03a2ee8f30a6a0e908d9d439f6bb03f5f9b70729d0136581e3b828ba73a2b34cfe807bef04ce2988d0dfa18d9ab443c927d4483b9e5a3140961a98a9de9145393f6fdd73292f15c932429ccd9311e2c8b1728f2a62c693e1e3ccd7b6c468fa67a12d5f0004dbadf728f629ce8463d89570138d51db6076abf4b7fde6cd0997523d4b1d8f0666bea8437cff1da99a3c27d1a929777de652d49de9ac04682d47d20b9ce1c43c2571338bc4128b52c7db16d5a29d5bb477c3b8b8b1fe5273b8203c86f201fa89e1411de8c4bd7eac3b2ecce4659aa2d7b8ce511f062ab","timestamp":1709378641385}]}},"nbformat_minor":0,"nbformat":4,"cells":[{"cell_type":"markdown","source":["# **Is it a bird? Notes**\n","\n"],"metadata":{"id":"ynejWe5_58QO"}},{"cell_type":"markdown","source":["I owe a big thanks to Jeremy for this amazing course. After completing Lesson1 of the course, many things flooded my brain and i feel like you got them too. Some of them are mentioned below!\n","* *Simply copying the code without knowing the exact meaning of it.*\n","* *Getting irritated with many errors*\n","* *Cannot able to think beyond the chapter that walls from training your own models.*\n","* *Dealing with GPU stuff.*\n","\n","\n","If you run the code on CPU it may take an hour or more for running the things out and getting the exact output. This lead to higher error rate.\n","Click on change runtime button if you are using Google Colab by clicking on runtime and set it to GPU for much faster results.\n","Ensure the same if you are using kaggle.\n","\n"],"metadata":{"id":"YprO-E5j58QX"}},{"cell_type":"markdown","source":["# **Dealing with Errors**"],"metadata":{"id":"uYzRBWlg58QZ"}},{"cell_type":"code","source":["# Kaggle requires phone verification to use the internet or a GPU. If you haven't done that yet, the cell below will fail\n","#    This code is only here to check that your internet is enabled. It doesn't do anything else.\n","#    Here's a help thread on getting your phone number verified: https://www.kaggle.com/product-feedback/135367\n","\n","import socket,warnings\n","try:\n","    socket.setdefaulttimeout(1)\n","    socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect(('1.1.1.1', 53))\n","except socket.error as ex: raise Exception(\"STOP: No internet. Click '>|' in top right and set 'Internet' switch to on\")"],"metadata":{"execution":{"iopub.status.busy":"2024-03-02T10:33:44.464974Z","iopub.execute_input":"2024-03-02T10:33:44.46534Z","iopub.status.idle":"2024-03-02T10:33:44.510914Z","shell.execute_reply.started":"2024-03-02T10:33:44.465312Z","shell.execute_reply":"2024-03-02T10:33:44.509752Z"},"trusted":true,"id":"bVpkPOkq58Qa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# It's a good idea to ensure you're running the latest version of any libraries you need.\n","# `!pip install -Uqq <libraries>` upgrades to the latest version of <libraries>\n","# NB: You can safely ignore any warnings or errors pip spits out about running as root or incompatibilities\n","import os\n","iskaggle = os.environ.get('KAGGLE_KERNEL_RUN_TYPE', '')\n","\n","if iskaggle:\n","    !pip install -Uqq fastai duckduckgo_search"],"metadata":{"execution":{"iopub.status.busy":"2024-03-02T10:33:52.54478Z","iopub.execute_input":"2024-03-02T10:33:52.545116Z","iopub.status.idle":"2024-03-02T10:34:04.962325Z","shell.execute_reply.started":"2024-03-02T10:33:52.545093Z","shell.execute_reply":"2024-03-02T10:34:04.961211Z"},"trusted":true,"id":"zysWU-jb58Qc"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["*Why fastbook?*\n","\n","* *A fastai friend designed to make learning machine learning more accessible and interactive.*\n","\n","*Wy duckduckgo is used?*\n","* *DuckDuckGo is commonly used in Fastai for its simplicity and privacy features, there's no strict limitation to using other search engines or sources for images. More often used as a convenient source for searching and downloading images for training machine learning models.*\n","\n"," **NOTE**: The following libraries are invaluable for effective error handling in various scenarios\n","\n"],"metadata":{"id":"pOTU8kQk58Qd"}},{"cell_type":"code","source":["# NOTE: The following libraries are invaluable for effective error handling in various scenarios:\n","\n","\n","# command for installing fastai\n","!pip install fastai\n","# for installing updated version of fastai bu using U\n","!pip install fastai -U\n","# for installing fastbook\n","!pip install fastbook\n","# duckduckgo - convenient source for searching and downloading images for training machine learning models\n","!pip install duckduckgo_search\n","# for upgrading it\n","!pip install --upgrade duckduckgo_search\n","# additional library used to create interactive widgets in Jupyter notebooks.\n","!pip install ipywidgets\n"],"metadata":{"execution":{"iopub.status.busy":"2024-03-02T10:34:09.336868Z","iopub.execute_input":"2024-03-02T10:34:09.337203Z","iopub.status.idle":"2024-03-02T10:35:13.320282Z","shell.execute_reply.started":"2024-03-02T10:34:09.337174Z","shell.execute_reply":"2024-03-02T10:35:13.319039Z"},"trusted":true,"id":"SaW9UQ5U58Qf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Importing modules\n"],"metadata":{"id":"7Yor3qdz58Qg"}},{"cell_type":"code","source":["from fastbook import *"],"metadata":{"execution":{"iopub.status.busy":"2024-03-02T10:35:32.221989Z","iopub.execute_input":"2024-03-02T10:35:32.222339Z","iopub.status.idle":"2024-03-02T10:35:42.05461Z","shell.execute_reply.started":"2024-03-02T10:35:32.222311Z","shell.execute_reply":"2024-03-02T10:35:42.053186Z"},"trusted":true,"id":"cRTtVHC458Qh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from fastai.vision.all import *"],"metadata":{"execution":{"iopub.status.busy":"2024-03-02T10:35:51.247294Z","iopub.execute_input":"2024-03-02T10:35:51.247624Z","iopub.status.idle":"2024-03-02T10:35:51.252182Z","shell.execute_reply.started":"2024-03-02T10:35:51.247598Z","shell.execute_reply":"2024-03-02T10:35:51.251268Z"},"trusted":true,"id":"SGkfGQod58Qi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import ipywidgets as widgets"],"metadata":{"execution":{"iopub.status.busy":"2024-03-02T10:35:54.342278Z","iopub.execute_input":"2024-03-02T10:35:54.342609Z","iopub.status.idle":"2024-03-02T10:35:54.347236Z","shell.execute_reply.started":"2024-03-02T10:35:54.342584Z","shell.execute_reply":"2024-03-02T10:35:54.345986Z"},"trusted":true,"id":"nLWhFTes58Qi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import duckduckgo_search"],"metadata":{"execution":{"iopub.status.busy":"2024-03-02T10:35:59.38786Z","iopub.execute_input":"2024-03-02T10:35:59.388268Z","iopub.status.idle":"2024-03-02T10:35:59.469885Z","shell.execute_reply.started":"2024-03-02T10:35:59.388239Z","shell.execute_reply":"2024-03-02T10:35:59.46842Z"},"trusted":true,"id":"YyasLGrr58Qj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#for handling errors related with duckduckgo\n","from duckduckgo_search import *\n","from fastbook import search_images_ddg\n","from fastcore.all import *"],"metadata":{"execution":{"iopub.status.busy":"2024-03-02T10:36:01.763079Z","iopub.execute_input":"2024-03-02T10:36:01.763643Z","iopub.status.idle":"2024-03-02T10:36:01.772007Z","shell.execute_reply.started":"2024-03-02T10:36:01.763612Z","shell.execute_reply":"2024-03-02T10:36:01.770767Z"},"trusted":true,"id":"2TOHUJqm58Qj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Declaring a function that contains two parameters\n","* term - the search term\n","* max_n -  maximum no images to retrieve\n","\n","search_images_ddg(term, max_results=max_n):\n","Calls the search_images_ddg function from Fastai's fastbook library, passing the search term (term) and maximum number of results (max_results). This function returns a list of dictionaries, where each dictionary represents an image with metadata\n","\n","max_results is made equal to max_n which defines no of images we want."],"metadata":{"id":"fGODEpTS58Qk"}},{"cell_type":"code","source":["from duckduckgo_search import *\n","from fastbook import search_images_ddg\n","from fastcore.all import *\n","\n","def search_images(term, max_n=30):\n","    print(f\"Searching for '{term}'\")\n","    return L(search_images_ddg(term, max_results=max_n)).itemgot('image')\n","    #return search_images_ddg(term, max_images=max_images)"],"metadata":{"execution":{"iopub.status.busy":"2024-03-02T10:36:05.401729Z","iopub.execute_input":"2024-03-02T10:36:05.402429Z","iopub.status.idle":"2024-03-02T10:36:05.408306Z","shell.execute_reply.started":"2024-03-02T10:36:05.402377Z","shell.execute_reply":"2024-03-02T10:36:05.406825Z"},"trusted":true,"id":"jCBaqeby58Ql"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["After function declaration, function call is to be done. Here it is implemented by using the term bird photos. You can replace the term with any of the model that you want to build."],"metadata":{"id":"uPovr0PM58Ql"}},{"cell_type":"code","source":["urls = search_images_ddg('bird photos')\n","urls[0]"],"metadata":{"execution":{"iopub.status.busy":"2024-03-02T10:36:10.402391Z","iopub.execute_input":"2024-03-02T10:36:10.403054Z","iopub.status.idle":"2024-03-02T10:36:14.956327Z","shell.execute_reply.started":"2024-03-02T10:36:10.403025Z","shell.execute_reply":"2024-03-02T10:36:14.9557Z"},"trusted":true,"id":"L6VJFBHT58Ql"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Now we have an Url with us.\n","**download_url** function is likely used for downloading files from a given URL.\n","'bird.jpg', indicates that the downloaded file will be saved with this name.\n","\n","**(urls[0], dest, show_progress=False):** Calls the download_url function with the first URL from the urls list (assuming urls is previously defined). The downloaded file is saved at the destination path ('bird.jpg'). The show_progress=False parameter indicates that the download progress won't be displayed.\n","\n","**fastai.vision** module, providing access to various functions and classes for computer vision tasks.\n","\n","**im = Image.open(dest):** Uses the Image.open function from the Python Imaging Library (PIL) to open the downloaded image file ('bird.jpg').\n","\n","**im.to_thumb(256, 256):** Generates a thumbnail of the opened image with dimensions 256x256 pixels using the to_thumb method. This method is commonly used to quickly generate smaller versions of images for display purposes, especially in notebooks or applications where smaller images are sufficient.\n"],"metadata":{"id":"EXMiP52858Qm"}},{"cell_type":"code","source":["from fastdownload import download_url\n","dest = 'bird.jpg'\n","download_url(urls[0], dest, show_progress=False)\n","\n","from fastai.vision.all import *\n","im = Image.open(dest)\n","im.to_thumb(256,256)"],"metadata":{"execution":{"iopub.status.busy":"2024-03-02T10:36:21.447155Z","iopub.execute_input":"2024-03-02T10:36:21.447483Z","iopub.status.idle":"2024-03-02T10:36:22.457802Z","shell.execute_reply.started":"2024-03-02T10:36:21.447457Z","shell.execute_reply":"2024-03-02T10:36:22.456846Z"},"trusted":true,"id":"yTc4zFXA58Qm"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["The above method is applied to get forest image too."],"metadata":{"id":"Q2tuD5m_58Qn"}},{"cell_type":"code","source":["download_url(search_images_ddg('forest photos', max_images=1)[0], 'forest.jpg', show_progress=False)\n","Image.open('forest.jpg').to_thumb(256,256)"],"metadata":{"execution":{"iopub.status.busy":"2024-03-02T10:36:25.887186Z","iopub.execute_input":"2024-03-02T10:36:25.887532Z","iopub.status.idle":"2024-03-02T10:36:28.107904Z","shell.execute_reply.started":"2024-03-02T10:36:25.887502Z","shell.execute_reply":"2024-03-02T10:36:28.107083Z"},"trusted":true,"id":"ddsZijhP58Qn"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[" This piece of code focuses on downloading and organizing images related to the themes 'forest' and 'bird' using Fastai's download_images and resize_images functions."],"metadata":{"id":"71KSiy0O58Qn"}},{"cell_type":"code","source":["searches = 'forest','bird'\n","# This is the root directory where the images will be stored.\n","path = Path('bird_or_not')\n","from time import sleep\n","# Iterates over each search theme ('forest' and 'bird').\n","for o in searches:\n","#     Forms the destination directory path by appending the current theme\n","    dest = (path/o)\n","#     ensures that any necessary parent directories are also created.\n","    dest.mkdir(exist_ok=True, parents=True)\n","#      Downloads images related to the current theme and the keyword 'photo' using the search_images_ddg\n","    download_images(dest, urls=search_images_ddg(f'{o} photo'))\n","    sleep(10)  # Pause between searches to avoid over-loading server\n","    download_images(dest, urls=search_images_ddg(f'{o} sun photo'))\n","    sleep(10)\n","    download_images(dest, urls=search_images_ddg(f'{o} shade photo'))\n","    sleep(10)\n","    resize_images(path/o, max_size=400, dest=path/o)"],"metadata":{"execution":{"iopub.status.busy":"2024-03-02T10:36:32.052971Z","iopub.execute_input":"2024-03-02T10:36:32.053335Z","iopub.status.idle":"2024-03-02T10:39:45.750006Z","shell.execute_reply.started":"2024-03-02T10:36:32.053305Z","shell.execute_reply":"2024-03-02T10:39:45.748777Z"},"trusted":true,"id":"54MMxeVk58Qo"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Theme of verifying and cleaning up downloaded images**"],"metadata":{"id":"y59BhYS058Qo"}},{"cell_type":"code","source":["failed = verify_images(get_image_files(path))\n","failed.map(Path.unlink)\n","len(failed)"],"metadata":{"execution":{"iopub.status.busy":"2024-03-02T10:39:50.229671Z","iopub.execute_input":"2024-03-02T10:39:50.230081Z","iopub.status.idle":"2024-03-02T10:39:52.392138Z","shell.execute_reply.started":"2024-03-02T10:39:50.230055Z","shell.execute_reply":"2024-03-02T10:39:52.390839Z"},"trusted":true,"id":"7CulIK4s58Qo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dls = DataBlock(\n","    blocks=(ImageBlock, CategoryBlock),\n","    get_items=get_image_files,\n","    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n","    get_y=parent_label,\n","    item_tfms=[Resize(192, method='squish')]\n",").dataloaders(path, bs=32)\n","\n","dls.show_batch(max_n=6)"],"metadata":{"execution":{"iopub.status.busy":"2024-03-02T10:40:31.321724Z","iopub.execute_input":"2024-03-02T10:40:31.322091Z","iopub.status.idle":"2024-03-02T10:40:32.11005Z","shell.execute_reply.started":"2024-03-02T10:40:31.322063Z","shell.execute_reply":"2024-03-02T10:40:32.108949Z"},"trusted":true,"id":"xtLfzvDD58Qo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["learn = vision_learner(dls, resnet18, metrics=error_rate)\n","learn.fine_tune(3)"],"metadata":{"execution":{"iopub.status.busy":"2024-03-02T10:40:45.622656Z","iopub.execute_input":"2024-03-02T10:40:45.623892Z","iopub.status.idle":"2024-03-02T10:44:40.134416Z","shell.execute_reply.started":"2024-03-02T10:40:45.623843Z","shell.execute_reply":"2024-03-02T10:44:40.133476Z"},"trusted":true,"id":"o1wKwO8C58Qp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Finally prints the probability and weather it is true or not."],"metadata":{"id":"AhCRzdby58Qp"}},{"cell_type":"code","source":["is_bird,_,probs = learn.predict(PILImage.create('bird.jpg'))\n","print(f\"This is a: {is_bird}.\")\n","print(f\"Probability it's a bird: {probs[0]:.4f}\")"],"metadata":{"execution":{"iopub.status.busy":"2024-03-02T10:44:59.350573Z","iopub.execute_input":"2024-03-02T10:44:59.350973Z","iopub.status.idle":"2024-03-02T10:44:59.433524Z","shell.execute_reply.started":"2024-03-02T10:44:59.350941Z","shell.execute_reply":"2024-03-02T10:44:59.432275Z"},"trusted":true,"id":"53AqzOm958Qp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"log1spzy58Qp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"FIWntHVo58Qp"},"execution_count":null,"outputs":[]}]}